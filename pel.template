<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>HISTORICON® 2024 PEL</title>

    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/css/bootstrap.css" rel="stylesheet">
    <link href="https://cdn.datatables.net/2.0.7/css/dataTables.bootstrap5.css" rel="stylesheet">
    <link href="pel.css" rel="stylesheet">

    <script src="https://code.jquery.com/jquery-3.7.0.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/5.3.0/js/bootstrap.bundle.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.js"></script>
    <script src="https://cdn.datatables.net/2.0.7/js/dataTables.bootstrap5.js"></script>

  <script>
    var num_footers = 0;
    var events = $events;

    function make_footer_search_box(column) {
        let title = column.footer().textContent;
        const sval = column.search();
        column.search('');

        // Create input element
        let input = document.createElement('input');
        input.placeholder = title;
        num_footers += 1;
        input.id = "foot-search-" + num_footers;
        column.footer().replaceChildren(input);

        // Event listener for user input
        input.addEventListener('keyup', () => {
            if (column.search() !== input.value) {
                column.search(input.value).draw();
            }
        });
    }

    function read_selections() {
        let pel_selections = null;
        const pel_selections_str = localStorage.getItem("pel-selections");
        console.log("PEL Selections READ: " + pel_selections_str);
        if (pel_selections_str) {
            pel_selections = JSON.parse(pel_selections_str);
        }
        return pel_selections;
    }

    function write_selections(pel_selections) {
        if (pel_selections === null) {
            pel_selections = [];
        }
        console.log("PEL Selections WRITE: " + pel_selections);
        const pel_selections_str = JSON.stringify(pel_selections);
        localStorage.setItem("pel-selections", pel_selections_str);
    }

    function add_selection(event_id) {
        console.log("Adding to pel_selections: " + event_id);
        let pel_selections = read_selections();
        const index = pel_selections.indexOf(event_id);
        if (index == -1) {
            pel_selections.push(event_id);
            write_selections(pel_selections);
        }
        return pel_selections;
    }

    function remove_selection(event_id) {
        console.log("Removing from pel_selections: " + event_id);
        let pel_selections = read_selections();
        const index = pel_selections.indexOf(event_id);
        if (index != -1) {
            pel_selections.splice(index, 1);
            write_selections(pel_selections);
        }
        return pel_selections;
    }

    function init_selections() {
        const pel_selections = read_selections();
        if (pel_selections === null) {
            write_selections([]);
        } else {
            update_selections(pel_selections);
        }

        $$('.chk').on('click', function () {
            toggle_selection($$(this));
        });
    }

    function set_cell_value(event_id, id_prefix, value, table) {
        const cell_id = '#'+id_prefix+event_id;
        let what = null;
        if (table) {
            table.cell(cell_id).data(value);
        } else {
            $$(cell_id).text(value);
        }
    }

    function update_conflicts(pel_selections, table) {
        for (event_id of pel_selections) {
            const evt = events[event_id];
            for (conflict_id of evt.conflicts) {
                set_cell_value(conflict_id, "hidden-conflicts-", "PELCONFLICTS", table);
            }
        }
        for (event_id of pel_selections) {
            set_cell_value(event_id, "hidden-conflicts-", "PELNOCONFLICTS", table);
        }
    }

    function update_selections(pel_selections, table) {
        for (event_id of pel_selections) {
            // Set Selected Checkbox
            const check_id = "#chk-state-" + event_id;
            $$(check_id).prop("checked", true);
            set_cell_value(event_id, "hidden-selected-", "PELSELECTED", table);
        }
        update_conflicts(pel_selections, table);
    }

    function toggle_selection (elem) {
        const is_checked = elem.prop("checked");
        const event_id = elem.prop("id").replace("chk-state-", "");
        const table = $$("#pel").DataTable();
        let hidden_value = "";
        const evt = events[event_id];
        let pel_selections = null;

        if (is_checked) {
            pel_selections =add_selection(event_id);
            set_cell_value(event_id, "hidden-selected-", "PELSELECTED", table);
            for (conflict_id of evt.conflicts) {
                set_cell_value(conflict_id, "hidden-conflicts-", "PELCONFLICTS", table);
            }
        } else {
            pel_selections = remove_selection(event_id);
            set_cell_value(event_id, "hidden-selected-", "PELNOTSELECTED", table);
            for (conflict_id of evt.conflicts) {
                set_cell_value(conflict_id, "hidden-conflicts-", "PELNOCONFLICTS", table);
            }
        }
        update_conflicts(pel_selections, table);
        table.draw();
    }

    // We need to wait until the 'DOMContentLoaded' event before jquery will be available
    document.addEventListener('DOMContentLoaded', () => {
      $$(document).ready(function () {
        init_selections();

        var table = $$('#pel').DataTable({
            order: [[1, "asc"]],
            pageLength: 25,
            stateSave: true,
            columnDefs: $column_defs,
            layout: {
                top2Start: 'info',
                top2End: 'search',
                topStart: 'pageLength',
                topEnd: 'paging',
                bottomStart: 'pageLength',
                bottomEnd: 'search',
                bottom2Start: 'info',
                bottom2End: 'paging'
            },
            initComplete: function () {
                console.log("initComplete: Calling make_footer_search_box")
                this.api().columns().every(function (elem) {
                    make_footer_search_box(this);
                });
                this.api().draw();
            }
        });

        // table.on('draw', function () {
        //     const pel_selections = read_selections();
        //     update_selections(pel_selections);
        // });

        $$('button.toggle-vis').on('click', function (e) {
           e.preventDefault();

            // Get the column API object
            var column = table.column($$(this).attr('data-column'));

            var col_visible = column.visible()
            if (col_visible) {
                // $$(this).attr("aria-pressed", "false");
                $$(this).removeClass("active");
                column.visible(false);
            } else {
                // $$(this).attr("aria-pressed", "true");
                $$(this).addClass("active");
                column.visible(true);
            }
        });

        $$('#show-selected-only').on('click', function () {
            const is_active = $$(this).hasClass("active");
            var column = table.column($hidden_selected_col_num);
            const search_term = is_active ? "PELSELECTED" : "";
            column.search(search_term).draw();
        });
        $$('#show-no-conflict').on('click', function () {
            const is_active = $$(this).hasClass("active");
            var column = table.column($hidden_conflicts_col_num);
            const search_term = is_active ? "PELNOCONFLICTS" : "";
            column.search(search_term).draw();
        });
        if (false) {
            $$('.show-day').on('click', function () {
                const this_day = $$(this).data("day");

                if ($$(this).hasClass("active")) {
                    $$(this).removeClass("active");
                    $$(this).attr("aria-pressed", "false");
                } else {
                    $$(this).addClass("active");
                    $$(this).attr("aria-pressed", "true");
                }
            });
        } // end false stuff
      });
    });

  </script>
</head>
<body>
<div class="main">
<h2>HISTORICON® 2024 PEL</h2>
<div class="btn-group" role="group" aria-label="Column Visibility">
Column Visibility:<br/>
$column_toggles
</div>

<div class="btn-group" role="group" aria-label="Special">
Special:<br/>
<button type="button" class="btn btn-sm btn-toggle btn-outline-secondary" data-bs-toggle="button" aria-pressed="false" autocomplete="off" id="show-selected-only">Show Selected Only</button>
<button type="button" class="btn btn-sm btn-toggle btn-outline-secondary" data-bs-toggle="button" aria-pressed="false" autocomplete="off" id="show-no-conflict">Hide Conflicts</button>
</div>
<!--
<div class="btn-group" role="group" aria-label="Days">
Days:<br/>
<button type="button" class="btn btn-outline-secondary btn-sm active show-day" id="show-wednesday" data-day="wednesday" aria-pressed="true">Wednesday</button>
<button type="button" class="btn btn-outline-secondary btn-sm active show-day" id="show-thursday" data-day="thursday" aria-pressed="true">Thursday</button>
<button type="button" class="btn btn-outline-secondary btn-sm active show-day" id="show-friday" data-day="friday" aria-pressed="true">Friday</button>
<button type="button" class="btn btn-outline-secondary btn-sm active show-day" id="show-saturday" data-day="saturday" aria-pressed="true">Saturday</button>
<button type="button" class="btn btn-outline-secondary btn-sm active show-day" id="show-sunday" data-day="sunday" aria-pressed="true">Sunday</button>
</div>
-->

<table id="pel" class="table table-striped display" style="width:100%">
    <thead>
    <tr>
        $table_header
    </tr>
    </thead>
    <tbody>
        $table_rows
    </tbody>
    <tfoot>
    <tr>
        $table_header
    </tr>
    </tfoot>
</table>
</div>
</body>
</html>